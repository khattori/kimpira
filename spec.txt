****
実行
****
$ kimpira run test.yml


******
意味論
******

環境は、名前と変数の対応関係を定義します。
変数は値の入れ物です。
変数は以下の順序で検索されます。
1. ローカル環境
2. コンテクスト環境

タスク呼び出し機構
------------------
(caller側)
1. 引数スタックに引数を積んでいきます。
   キーワード引数の場合、引数辞書にキーワードと値を格納します。
2. タスクを検索して、呼び出します。

(callee側)
1. ローカル環境が新規に生成され、スタックに積まれた値と対応するパラメー
   タが格納されます。
2. 引数辞書の値がパラメータに設定されます。すでにパラメータに値が渡され
   ている場合、エラーとなります。
3. 値が渡されていないパラメータが残っている場合、コンテクスト環境からそ
   の値が検索され、設定されます。
4. 値が見つからない場合、デフォルト値が設定されていれば、その値が設定さ
   れます。
5. 値が設定されていないパラメータが残っている場合、エラーとなります。


TASK定義
--------
TASK: <文字列>
PARAMS: <パラメータ列>
CONTEXT: <パラメータ列>
DO: <命令列>

********
命令一覧
********

PRINT命令
---------
PRINT: <式>

COMMAND命令
-----------
COMMAND: <式>


CALL命令
--------
CALL: <ファイルパス>:<タスク名> <パラメータ> ...

同じファイル上のタスクの場合:
CALL: <タスク名> <パラメータ> ...

CALL: <ファイルパス> <パラメータ> ...


SCRIPT命令
----------
SCRIPT: <ファイルパス> <パラメータ> ...


SET命令
-------
ローカル変数に値を設定します。未定義のローカル変数は新たに定義されます。

SET: <変数名>=<式> ...


RETURN命令
----------
RETURN: <式>


BREAK命令
---------


CONTINUE命令
------------


WITH命令
--------
現在のコンテクストの下に新たなコンテクストを作成し、コンテクスト変数を定義します。

WITH: <変数名>=<式> ...
DO: <命令列>


IF命令
------

IF: <式>
THEN: <命令列>

IF: <式>
THEN: <命令列>
ELSE: <命令列>

COND:命令
--------
COND:
  - IF: <式>
    DO: <命令列>
  - IF: <式>
    DO: <命令列>
  ...
  - ELSE: <命令列>

REPEAT命令
----------

REPEAT:
DO: <命令列>

REPEAT:
WHILE: <式>
DO: <命令列>

REPEAT:
DO: <命令列>
UNTIL: <式>

FOR命令
-------

FOR:
EACH: <変数名>
IN: <式:文字列>
DO: <命令列>

FOR:
EACH: <変数名>
STEP: <式>
DO: <命令列>

